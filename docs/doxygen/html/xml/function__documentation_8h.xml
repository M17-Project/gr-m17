<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="function__documentation_8h" kind="file" language="C++">
    <compoundname>function_documentation.h</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="function__documentation_8h_1a560b205367d28a4b05fe73144a70db45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_key</definition>
        <argsstring>(std::string arg)</argsstring>
        <name>set_key</name>
        <param>
          <type>std::string</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Set encryption key for M17 decoder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hex-encoded encryption key (32 bytes = 64 hex characters)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function sets the encryption key used for decrypting M17 frames. The key must be provided as a hex-encoded string (64 characters for 32 bytes).</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Never log the key value or store it in plaintext </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use secure memory clearing when done with the key </para>
</simplesect>
<simplesect kind="note"><para>The key is validated for proper hex format and length </para>
</simplesect>
<simplesect kind="note"><para>Invalid keys will be rejected with error logging</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>a<sp/>32-byte<sp/>encryption<sp/>key<sp/>(64<sp/>hex<sp/>characters)</highlight></codeline>
<codeline><highlight class="normal">decoder.set_key(&quot;0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef&quot;);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Hex-encoded encryption key (must be exactly 64 characters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if key format is invalid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a0e52b3459c04f731eb8f9a6054ff4d95" kindref="member">set_seed()</ref> for setting the scrambler seed </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" kindref="member">set_ed25519_keys()</ref> for setting Ed25519 keys </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" kindref="member">set_curve25519_keys()</ref> for setting Curve25519 keys </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="37" column="6" declfile="function_documentation.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a0e52b3459c04f731eb8f9a6054ff4d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_seed</definition>
        <argsstring>(std::string seed)</argsstring>
        <name>set_seed</name>
        <param>
          <type>std::string</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
<para>Set scrambler seed for M17 decoder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Hex-encoded scrambler seed (variable length)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function sets the scrambler seed used for descrambling M17 frames. The seed is used to initialize the scrambler sequence generator.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Never log the seed value </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use secure memory clearing for seed data </para>
</simplesect>
<simplesect kind="note"><para>The seed is validated for proper hex format </para>
</simplesect>
<simplesect kind="note"><para>Invalid seeds will be rejected with error logging</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>a<sp/>scrambler<sp/>seed</highlight></codeline>
<codeline><highlight class="normal">decoder.set_seed(&quot;deadbeefcafebabe&quot;);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Hex-encoded scrambler seed (hex string) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if seed format is invalid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a560b205367d28a4b05fe73144a70db45" kindref="member">set_key()</ref> for setting the encryption key </para>
</simplesect>
<simplesect kind="see"><para>scrambler_sequence_generator() for scrambler implementation </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="66" column="6" declfile="function_documentation.h" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_ed25519_keys</definition>
        <argsstring>(const uint8_t *public_key, size_t pub_key_size, const uint8_t *private_key, size_t priv_key_size)</argsstring>
        <name>set_ed25519_keys</name>
        <param>
          <type>const uint8_t *</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pub_key_size</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>private_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>priv_key_size</declname>
        </param>
        <briefdescription>
<para>Set Ed25519 cryptographic keys. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 private key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priv_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of private key (must be 32)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function sets the Ed25519 keys used for digital signatures in extended crypto mode. Ed25519 provides modern elliptic curve cryptography with strong security guarantees.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Never log private keys </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Store private keys in hardware security modules </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use secure memory clearing for key data </para>
</simplesect>
<simplesect kind="note"><para>Keys are validated for proper size and format </para>
</simplesect>
<simplesect kind="note"><para>Invalid keys will be rejected with error logging</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>Ed25519<sp/>keys<sp/>for<sp/>digital<sp/>signatures</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>ed25519_pub[32],<sp/>ed25519_priv[32];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...<sp/>load<sp/>keys<sp/>from<sp/>secure<sp/>storage<sp/>...</highlight></codeline>
<codeline><highlight class="normal">decoder.set_ed25519_keys(ed25519_pub,<sp/>32,<sp/>ed25519_priv,<sp/>32);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 private key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priv_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of private key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if key sizes are invalid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" kindref="member">set_curve25519_keys()</ref> for ECDH keys </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a00d610910f54f42ab04d99204d686a15" kindref="member">verify_ed25519_signature()</ref> for signature verification </para>
</simplesect>
<simplesect kind="see"><para>sign_ed25519_message() for message signing </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="106" column="6" declfile="function_documentation.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_curve25519_keys</definition>
        <argsstring>(const uint8_t *public_key, size_t pub_key_size, const uint8_t *private_key, size_t priv_key_size)</argsstring>
        <name>set_curve25519_keys</name>
        <param>
          <type>const uint8_t *</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pub_key_size</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>private_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>priv_key_size</declname>
        </param>
        <briefdescription>
<para>Set Curve25519 cryptographic keys. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Curve25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Curve25519 private key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priv_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of private key (must be 32)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function sets the Curve25519 keys used for ECDH key agreement in extended crypto mode. Curve25519 provides secure key exchange for establishing shared secrets.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Never log private keys </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Store private keys in hardware security modules </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use secure memory clearing for key data </para>
</simplesect>
<simplesect kind="note"><para>Keys are validated for proper size and format </para>
</simplesect>
<simplesect kind="note"><para>Invalid keys will be rejected with error logging</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>Curve25519<sp/>keys<sp/>for<sp/>ECDH</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>curve25519_pub[32],<sp/>curve25519_priv[32];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...<sp/>load<sp/>keys<sp/>from<sp/>secure<sp/>storage<sp/>...</highlight></codeline>
<codeline><highlight class="normal">decoder.set_curve25519_keys(curve25519_pub,<sp/>32,<sp/>curve25519_priv,<sp/>32);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Curve25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Curve25519 private key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priv_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of private key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if key sizes are invalid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" kindref="member">set_ed25519_keys()</ref> for signature keys </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a8b62c4920369e22adcc7c61ba81dbbe1" kindref="member">perform_curve25519_ecdh()</ref> for key agreement </para>
</simplesect>
<simplesect kind="see"><para>derive_encryption_key() for key derivation </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="147" column="6" declfile="function_documentation.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a00d610910f54f42ab04d99204d686a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verify_ed25519_signature</definition>
        <argsstring>(const uint8_t *data, size_t data_len, const uint8_t *signature, size_t sig_size, const uint8_t *public_key, size_t pub_key_size)</argsstring>
        <name>verify_ed25519_signature</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sig_size</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pub_key_size</declname>
        </param>
        <briefdescription>
<para>Verify Ed25519 digital signature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to verify (raw bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 signature (64 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of signature (must be 64) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure</para>
</simplesect>
This function verifies an Ed25519 digital signature against the provided data and public key. Ed25519 provides strong security guarantees and is resistant to side-channel attacks.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Always validate return codes </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use constant-time operations for signature verification </para>
</simplesect>
<simplesect kind="note"><para>Signature verification is cryptographically secure </para>
</simplesect>
<simplesect kind="note"><para>Invalid signatures will be rejected</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Verify<sp/>Ed25519<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(decoder.verify_ed25519_signature(data,<sp/>data_len,<sp/>signature,<sp/>64,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public_key,<sp/>32)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Signature<sp/>verified<sp/>successfully\n&quot;);</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Signature<sp/>verification<sp/>failed\n&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to verify (raw bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 signature (64 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of signature (must be 64) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Ed25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of public key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure</para>
</simplesect>
<simplesect kind="see"><para>sign_ed25519_message() for message signing </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" kindref="member">set_ed25519_keys()</ref> for setting keys </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="193" column="5" declfile="function_documentation.h" declline="193" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a8b62c4920369e22adcc7c61ba81dbbe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int perform_curve25519_ecdh</definition>
        <argsstring>(const uint8_t *peer_public_key, size_t pub_key_size)</argsstring>
        <name>perform_curve25519_ecdh</name>
        <param>
          <type>const uint8_t *</type>
          <declname>peer_public_key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pub_key_size</declname>
        </param>
        <briefdescription>
<para>Perform Curve25519 ECDH key agreement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peer_public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer&apos;s Curve25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of peer&apos;s public key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure</para>
</simplesect>
This function performs Curve25519 ECDH key agreement to establish a shared secret with a peer. The shared secret can then be used for symmetric encryption.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Always validate return codes </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use secure key derivation after ECDH </para>
</simplesect>
<simplesect kind="note"><para>ECDH provides forward secrecy </para>
</simplesect>
<simplesect kind="note"><para>Shared secrets should be derived using HKDF</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Perform<sp/>ECDH<sp/>key<sp/>agreement</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(decoder.perform_curve25519_ecdh(peer_pubkey,<sp/>32)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Derive<sp/>encryption<sp/>key<sp/>from<sp/>shared<sp/>secret</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>encryption_key[32];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decoder.derive_encryption_key(shared_secret,<sp/>32,<sp/>salt,<sp/>salt_len,<sp/>encryption_key,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peer_public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Peer&apos;s Curve25519 public key (32 bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub_key_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of peer&apos;s public key (must be 32) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on failure</para>
</simplesect>
<simplesect kind="see"><para>derive_encryption_key() for key derivation </para>
</simplesect>
<simplesect kind="see"><para><ref refid="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" kindref="member">set_curve25519_keys()</ref> for setting keys </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="231" column="5" declfile="function_documentation.h" declline="231" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a1224487882bddae056adfc137c04d78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_m17_strict_mode</definition>
        <argsstring>(bool strict_mode)</argsstring>
        <name>set_m17_strict_mode</name>
        <param>
          <type>bool</type>
          <declname>strict_mode</declname>
        </param>
        <briefdescription>
<para>Set M17 strict mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strict_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable strict M17 compliance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This function enables or disables M17 strict mode. In strict mode, only M17 specification compliant features are used (P-256 ECDSA, AES-256-CTR). This ensures maximum compatibility with other M17 implementations.</para>
<sect1 id="m17__documentation_8h_1compatibility">
<title>Compatibility Modes</title>
<para><bold>Strict</bold> Mode (true):<itemizedlist>
<listitem><para>P-256 ECDSA for digital signatures</para>
</listitem><listitem><para>AES-256-CTR for encryption</para>
</listitem><listitem><para>Standard LSF/META field usage</para>
</listitem><listitem><para>Compatible with all M17 implementations</para>
</listitem></itemizedlist>
</para>
<para><bold>Extended</bold> Mode (false):<itemizedlist>
<listitem><para>Ed25519 digital signatures</para>
</listitem><listitem><para>Curve25519 ECDH key agreement</para>
</listitem><listitem><para>AES-256-GCM authenticated encryption</para>
</listitem><listitem><para>Nitrokey HSM integration</para>
</listitem><listitem><para>NOT M17 spec compliant</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>SECURITY WARNING: Extended mode is NOT M17 spec compliant </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY WARNING: Extended mode requires coordination with other stations </para>
</simplesect>
<simplesect kind="note"><para>Use strict mode for maximum compatibility </para>
</simplesect>
<simplesect kind="note"><para>Extended mode is for advanced users with Nitrokey hardware</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Enable<sp/>strict<sp/>M17<sp/>mode<sp/>(default,<sp/>recommended)</highlight></codeline>
<codeline><highlight class="normal">decoder.set_m17_strict_mode(true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Enable<sp/>extended<sp/>mode<sp/>(requires<sp/>coordination)</highlight></codeline>
<codeline><highlight class="normal">decoder.set_m17_strict_mode(false);</highlight></codeline>
<codeline><highlight class="normal">decoder.set_extended_crypto(true);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strict_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable strict M17 compliance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para>
</simplesect>
<simplesect kind="see"><para>set_extended_crypto() for extended mode </para>
</simplesect>
<simplesect kind="see"><para>is_m17_compatible() for compatibility check </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="277" column="6" declfile="function_documentation.h" declline="277" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="function__documentation_8h_1a68e6dfa9d090461140f3e9032bcbf1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool init_nitrokey_security</definition>
        <argsstring>(const char *pin)</argsstring>
        <name>init_nitrokey_security</name>
        <param>
          <type>const char *</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Initialize Nitrokey hardware security module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Nitrokey PIN for authentication </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure</para>
</simplesect>
This function initializes the Nitrokey hardware security module for secure cryptographic operations. The Nitrokey provides hardware-backed key storage and cryptographic operations.</para>
<sect1 id="m17__documentation_8h_1security">
<title>Security Features</title>
<para><simplesect kind="warning"><para>SECURITY CRITICAL: Never log the PIN </para>
</simplesect>
<simplesect kind="warning"><para>SECURITY CRITICAL: Use strong PINs for production </para>
</simplesect>
<simplesect kind="note"><para>Nitrokey provides hardware security for key storage </para>
</simplesect>
<simplesect kind="note"><para>Cryptographic operations are performed in hardware</para>
</simplesect>
</para>
</sect1>
<sect1 id="m17__documentation_8h_1usage">
<title>Usage Examples</title>
<para><programlisting><codeline><highlight class="normal">//<sp/>Initialize<sp/>Nitrokey<sp/>HSM</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(decoder.init_nitrokey_security(&quot;123456&quot;))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Nitrokey<sp/>initialized<sp/>successfully\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>hardware-backed<sp/>cryptography</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>decoder.sign_with_hardware(data,<sp/>len,<sp/>signature,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Nitrokey<sp/>initialization<sp/>failed\n&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Nitrokey PIN for authentication </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure</para>
</simplesect>
<simplesect kind="see"><para>sign_with_hardware() for hardware signing </para>
</simplesect>
<simplesect kind="see"><para>ecdh_with_hardware() for hardware ECDH </para>
</simplesect>
<simplesect kind="see"><para>decrypt_with_hardware() for hardware decryption </para>
</simplesect>
</para>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="function_documentation.h" line="314" column="6" declfile="function_documentation.h" declline="314" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>M17 Function Documentation. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains detailed Doxygen documentation for M17 functions, including security considerations, usage examples, and parameter descriptions. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="37" refid="function__documentation_8h_1a560b205367d28a4b05fe73144a70db45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a560b205367d28a4b05fe73144a70db45" kindref="member">set_key</ref>(std::string<sp/>arg);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="function__documentation_8h_1a0e52b3459c04f731eb8f9a6054ff4d95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a0e52b3459c04f731eb8f9a6054ff4d95" kindref="member">set_seed</ref>(std::string<sp/>seed);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a885acb85ce4d72ac86a4fc232c34ec1b" kindref="member">set_ed25519_keys</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>public_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pub_key_size,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>private_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>priv_key_size);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1afc04d69befe1383bf7c23ff9b4618e58" kindref="member">set_curve25519_keys</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>public_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pub_key_size,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>private_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>priv_key_size);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="function__documentation_8h_1a00d610910f54f42ab04d99204d686a15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a00d610910f54f42ab04d99204d686a15" kindref="member">verify_ed25519_signature</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_len,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>signature,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sig_size,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>public_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pub_key_size);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="function__documentation_8h_1a8b62c4920369e22adcc7c61ba81dbbe1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a8b62c4920369e22adcc7c61ba81dbbe1" kindref="member">perform_curve25519_ecdh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>peer_public_key,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pub_key_size);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="function__documentation_8h_1a1224487882bddae056adfc137c04d78f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a1224487882bddae056adfc137c04d78f" kindref="member">set_m17_strict_mode</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>strict_mode);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="function__documentation_8h_1a68e6dfa9d090461140f3e9032bcbf1b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="function__documentation_8h_1a68e6dfa9d090461140f3e9032bcbf1b8" kindref="member">init_nitrokey_security</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pin);</highlight></codeline>
    </programlisting>
    <location file="function_documentation.h"/>
  </compounddef>
</doxygen>
